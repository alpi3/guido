"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var discord_js_1 = require("discord.js");
var open_trivia_db_1 = require("open-trivia-db");
var EmbedGenerator_1 = require("./EmbedGenerator");
var messageActionRows_1 = require("../Components/messageActionRows");
var util_1 = require("util");
var events_1 = require("events");
var prepareCustomQuestions_1 = require("../Functions/prepareCustomQuestions");
var wait = (0, util_1.promisify)(setTimeout);
function reply(int, obj) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!int.replied) return [3 /*break*/, 2];
                    return [4 /*yield*/, int.followUp(obj)];
                case 1:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 2: return [4 /*yield*/, int.reply(obj)];
                case 3:
                    _a.sent();
                    _a.label = 4;
                case 4: return [2 /*return*/];
            }
        });
    });
}
/**
 * @class Class for trivia games. Holds dynamic data relating to the ongoing game.
 */
var TriviaGame = /** @class */ (function (_super) {
    __extends(TriviaGame, _super);
    function TriviaGame(component, manager, options) {
        var _this = _super.call(this) || this;
        _this.manager = manager;
        _this.component = component;
        _this.channel = component.channel;
        _this.guild = component.guild;
        _this.players = new discord_js_1.Collection();
        _this.questions = [];
        _this.hostMember = component.hostMember;
        _this.leaderboard = new discord_js_1.Collection();
        _this.options = options
            ? Object.assign(TriviaGame.defaults, options)
            : TriviaGame.defaults;
        _this.options.questionData = (options === null || options === void 0 ? void 0 : options.questionData)
            ? Object.assign(TriviaGame.defaults.questionData, options.questionData)
            : TriviaGame.defaults.questionData;
        _this.state = "pending";
        _this.embeds = new EmbedGenerator_1.default(_this);
        _this.messages = new discord_js_1.Collection();
        setImmediate(function () {
            _this.emit("pending");
        });
        return _this;
        // this.canvas = new CanvasGenerator(this);
    }
    /**
     * Starts the trivia match.
     */
    TriviaGame.prototype.start = function () {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var err_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.state == "ended")
                            return [2 /*return*/];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        this.manager.validator.validateDiscordStructures(this);
                        this.manager.validator.validateGameOptions(this.options);
                        this.manager.games.set(this.channel.id, this);
                        return [4 /*yield*/, this.startComponentCollector()];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.component.reply[this.component.type]({
                                content: "Game has started. Click the join button to enter",
                                ephemeral: true,
                            })];
                    case 3:
                        _a.sent();
                        this.state = "queue";
                        setImmediate(function () {
                            _this.emit("queue");
                        });
                        return [3 /*break*/, 5];
                    case 4:
                        err_1 = _a.sent();
                        this.state = "ended";
                        this.emit("ended");
                        this.component.followUp[this.component.type]({
                            content: err_1.message,
                            ephemeral: true,
                        });
                        reject(err_1);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        }); });
    };
    /**
     * The data of this game.
     * @type {TriviaGameResultData}
     */
    TriviaGame.prototype.data = function () {
        var playerData = this.players.map(function (p) {
            return {
                id: p.id,
                points: p.points,
            };
        });
        var resultData = {
            gameConfiguration: this.options,
            hostMemberId: this.hostMember.id,
            players: playerData,
        };
        return resultData;
    };
    /**
     * Ends this game
     */
    TriviaGame.prototype.end = function () {
        var _this = this;
        this.manager.games.delete(this.channel.id);
        this.state = "ended";
        setImmediate(function () {
            _this.emit("ended", _this.data());
        });
    };
    /**
     * Starts iterating through TriviaGame#questions and emits each.
     * @private
     */
    TriviaGame.prototype.beginGameLoop = function () {
        var e_1, _a;
        return __awaiter(this, void 0, void 0, function () {
            var _b, _c, question, msg, e_1_1, msg1;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 8, 9, 14]);
                        _b = __asyncValues(this.questions);
                        _d.label = 1;
                    case 1: return [4 /*yield*/, _b.next()];
                    case 2:
                        if (!(_c = _d.sent(), !_c.done)) return [3 /*break*/, 7];
                        question = _c.value;
                        if (this.state == "ended")
                            return [2 /*return*/];
                        return [4 /*yield*/, this.channel.send({
                                content: "🕥 **Preparing the next question...**",
                            })];
                    case 3:
                        msg = _d.sent();
                        this.messages.set(msg.id, msg);
                        return [4 /*yield*/, wait(this.options.timeBetweenRounds)];
                    case 4:
                        _d.sent();
                        return [4 /*yield*/, this.emitQuestion(question)];
                    case 5:
                        _d.sent();
                        _d.label = 6;
                    case 6: return [3 /*break*/, 1];
                    case 7: return [3 /*break*/, 14];
                    case 8:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 14];
                    case 9:
                        _d.trys.push([9, , 12, 13]);
                        if (!(_c && !_c.done && (_a = _b.return))) return [3 /*break*/, 11];
                        return [4 /*yield*/, _a.call(_b)];
                    case 10:
                        _d.sent();
                        _d.label = 11;
                    case 11: return [3 /*break*/, 13];
                    case 12:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 13: return [7 /*endfinally*/];
                    case 14: return [4 /*yield*/, this.channel.send({
                            embeds: [this.embeds.finalLeaderboard()],
                        })];
                    case 15:
                        msg1 = _d.sent();
                        this.messages.set(msg1.id, msg1);
                        this.end();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Prepares the game's data and channel for the next round.
     */
    TriviaGame.prototype.prepareNextRound = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                this.messages
                    .filter(function (msg) { return msg.deletable; })
                    .forEach(function (msg) { return __awaiter(_this, void 0, void 0, function () {
                    var _1;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, msg.delete()];
                            case 1:
                                _a.sent();
                                return [3 /*break*/, 3];
                            case 2:
                                _1 = _a.sent();
                                return [2 /*return*/, void 0];
                            case 3: return [2 /*return*/];
                        }
                    });
                }); });
                this.players.forEach(function (p) {
                    if (!p.hasAnswered) {
                        p.correctAnswerStreak = 0;
                    }
                    p.hasAnswered = false;
                    p.isCorrect = false;
                });
                this.updateLeaderboard();
                return [2 /*return*/];
            });
        });
    };
    /**
     * Calculates the amount of points to award the player.
     * @param {number} timePassed - The amount of time elapsed since the question's emission in ms.
     * @private
     */
    TriviaGame.prototype.calculatePoints = function (timePassed) {
        var _a = this.options, timePerQuestion = _a.timePerQuestion, maxPoints = _a.maximumPoints, minPoints = _a.minimumPoints;
        var timeProportion = Number((timePassed / timePerQuestion).toPrecision(2));
        var points = maxPoints - Math.ceil((maxPoints - minPoints) * timeProportion);
        return points;
    };
    /**
     * Sends a question in the game's text channel and listens for answers.
     * @param {Question} question - The question to send.
     * @private
     */
    TriviaGame.prototype.emitQuestion = function (question) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                        var msg, collector, emissionTime;
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (this.state == "ended")
                                        return [2 /*return*/];
                                    return [4 /*yield*/, this.channel.send({
                                            embeds: [this.embeds.question(question)],
                                            components: [TriviaGame.buttonRows[question.type]],
                                        })];
                                case 1:
                                    msg = _a.sent();
                                    this.messages.set(msg.id, msg);
                                    collector = this.channel.createMessageComponentCollector({
                                        time: this.options.timePerQuestion,
                                    });
                                    emissionTime = performance.now();
                                    collector.on("collect", function (i) { return __awaiter(_this, void 0, void 0, function () {
                                        var answerTime, timeElapsed, player, answer, streakBonus, member, msg1;
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0:
                                                    if (this.state == "ended")
                                                        return [2 /*return*/];
                                                    answerTime = performance.now();
                                                    timeElapsed = answerTime - emissionTime - 500;
                                                    if (timeElapsed > this.options.timePerQuestion)
                                                        return [2 /*return*/];
                                                    player = this.players.get(i.user.id);
                                                    if (!!player) return [3 /*break*/, 1];
                                                    return [2 /*return*/, void reply(i, {
                                                            content: "❌ You are not apart of this match",
                                                            ephemeral: true,
                                                        })];
                                                case 1:
                                                    if (!player.hasAnswered) return [3 /*break*/, 3];
                                                    return [4 /*yield*/, reply(i, {
                                                            content: "❗ **You have already chosen an answer**",
                                                            ephemeral: true,
                                                        })];
                                                case 2: return [2 /*return*/, void (_a.sent())];
                                                case 3:
                                                    player.hasAnswered = true;
                                                    answer = (question.type == "multiple" ? question.allAnswers : ["False", "True"])[Number(i.customId)];
                                                    player.isCorrect = question.checkAnswer("".concat(answer));
                                                    if (player.isCorrect) {
                                                        player.points += this.calculatePoints(timeElapsed);
                                                        player.correctAnswerStreak++;
                                                        if (player.correctAnswerStreak >= this.options.streakDefinitionLevel) {
                                                            streakBonus = Math.min(Math.max((player.correctAnswerStreak -
                                                                (this.options.streakDefinitionLevel - 1)) *
                                                                this.options.pointsPerStreakAmount, 0), this.options.maximumStreakBonus);
                                                            player.points += streakBonus;
                                                        }
                                                    }
                                                    else {
                                                        player.isCorrect = false;
                                                        player.correctAnswerStreak = 0;
                                                    }
                                                    return [4 /*yield*/, reply(i, {
                                                            content: "\uD83D\uDD39 Your answer has been locked in!\n\n\u26A1 **Speed: ".concat(+(timeElapsed / 1000).toFixed(2), " seconds**"),
                                                            ephemeral: true,
                                                        })];
                                                case 4:
                                                    _a.sent();
                                                    return [4 /*yield*/, this.guild.members.fetch(player.id)];
                                                case 5:
                                                    member = _a.sent();
                                                    return [4 /*yield*/, this.channel.send({
                                                            content: "**".concat(member.displayName, "** has locked in!"),
                                                        })];
                                                case 6:
                                                    msg1 = _a.sent();
                                                    this.messages.set(msg1.id, msg1);
                                                    return [2 /*return*/];
                                            }
                                        });
                                    }); });
                                    collector.on("end", function () { return __awaiter(_this, void 0, void 0, function () {
                                        var msg2;
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0:
                                                    if (this.state == "ended")
                                                        return [2 /*return*/];
                                                    this.players
                                                        .filter(function (p) { return !p.hasAnswered; })
                                                        .forEach(function (p) { return (p.correctAnswerStreak = 0); });
                                                    return [4 /*yield*/, this.channel.send({
                                                            embeds: [this.embeds.leaderboardUpdate(question)],
                                                        })];
                                                case 1:
                                                    msg2 = _a.sent();
                                                    setTimeout(function () {
                                                        if (msg2.deletable) {
                                                            msg2.delete().catch(function (_) { return null; });
                                                        }
                                                    }, 10000);
                                                    return [4 /*yield*/, this.prepareNextRound()];
                                                case 2:
                                                    _a.sent();
                                                    return [4 /*yield*/, wait(this.options.timeBetweenRounds)];
                                                case 3:
                                                    _a.sent();
                                                    resolve();
                                                    return [2 /*return*/];
                                            }
                                        });
                                    }); });
                                    return [2 /*return*/];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Starts the chain of private functions to start the game.
     * @private
     */
    TriviaGame.prototype.initializeGame = function () {
        return __awaiter(this, void 0, void 0, function () {
            var data, _a, amount, difficulty, type, category, _b, msg;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (this.state == "ended")
                            return [2 /*return*/];
                        data = this.options.questionData;
                        if (!(typeof data == "object" && !Array.isArray(data) && data !== null)) return [3 /*break*/, 2];
                        _a = data, amount = _a.amount, difficulty = _a.difficulty, type = _a.type, category = _a.category;
                        _b = this;
                        return [4 /*yield*/, (0, open_trivia_db_1.getQuestions)({
                                amount: amount,
                                difficulty: difficulty,
                                type: type,
                                category: category,
                            })];
                    case 1:
                        _b.questions = _c.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        if (Array.isArray(data)) {
                            this.questions = (0, prepareCustomQuestions_1.default)(data);
                        }
                        else {
                            throw new TypeError("Provided QuestionData must be of type QuestionData | CustomQuestion[], recieved ".concat(typeof data));
                        }
                        _c.label = 3;
                    case 3: return [4 /*yield*/, this.channel.send({
                            embeds: [this.embeds.gameStart()],
                        })];
                    case 4:
                        msg = _c.sent();
                        this.updateLeaderboard();
                        this.messages.set(msg.id, msg);
                        return [4 /*yield*/, this.beginGameLoop()];
                    case 5:
                        _c.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Sets up a listener to collect answers.
     * @private
     */
    TriviaGame.prototype.startComponentCollector = function () {
        return __awaiter(this, void 0, void 0, function () {
            var msg, collector;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.channel.send({
                            embeds: [this.embeds.gameQueueStart()],
                            components: [TriviaGame.buttonRows.queue],
                        })];
                    case 1:
                        msg = _a.sent();
                        this.messages.set(msg.id, msg);
                        collector = this.channel.createMessageComponentCollector({
                            time: this.options.queueTime,
                        });
                        collector.on("collect", function (int) { return __awaiter(_this, void 0, void 0, function () {
                            var inQueueAlready, member, joinedQueue, player, msg1;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (this.state == "ended")
                                            return [2 /*return*/];
                                        if (!this.players.has(int.user.id)) return [3 /*break*/, 2];
                                        inQueueAlready = {
                                            content: "❗ **You are already in the queue**",
                                            ephemeral: true,
                                        };
                                        return [4 /*yield*/, reply(int, inQueueAlready)];
                                    case 1:
                                        _a.sent();
                                        return [3 /*break*/, 6];
                                    case 2: return [4 /*yield*/, this.guild.members.fetch(int.user.id)];
                                    case 3:
                                        member = _a.sent();
                                        if (!member) {
                                            reply(int, {
                                                content: "❌ Failed to enter you into the queue, please try again",
                                                ephemeral: true,
                                            });
                                            return [2 /*return*/];
                                        }
                                        joinedQueue = {
                                            content: "✅ Successfully joined queue",
                                            ephemeral: true,
                                        };
                                        return [4 /*yield*/, reply(int, joinedQueue)];
                                    case 4:
                                        _a.sent();
                                        player = Object.assign(member, {
                                            points: 0,
                                            hasAnswered: false,
                                            isCorrect: false,
                                            correctAnswerStreak: 0,
                                        });
                                        this.players.set(player.id, player);
                                        this.emit("playerJoinQueue", player);
                                        return [4 /*yield*/, this.channel.send({
                                                content: "\uD83D\uDE4C   **".concat(player.displayName, "** has joined in!"),
                                            })];
                                    case 5:
                                        msg1 = _a.sent();
                                        this.messages.set(msg1.id, msg1);
                                        if (this.players.size === this.options.maximumPlayerCount) {
                                            collector.stop("Game has reached set maximum player capacity");
                                        }
                                        _a.label = 6;
                                    case 6: return [2 /*return*/];
                                }
                            });
                        }); });
                        collector.on("end", function () { return __awaiter(_this, void 0, void 0, function () {
                            var msg2;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (this.state == "ended")
                                            return [2 /*return*/];
                                        if (!(collector.endReason ||
                                            this.players.size >= this.options.minimumPlayerCount)) return [3 /*break*/, 2];
                                        return [4 /*yield*/, this.initializeGame()];
                                    case 1:
                                        _a.sent();
                                        return [3 /*break*/, 4];
                                    case 2:
                                        this.end();
                                        return [4 /*yield*/, this.channel.send({
                                                content: "Game failed to meet minimum player requirements",
                                            })];
                                    case 3:
                                        msg2 = _a.sent();
                                        this.messages.set(msg2.id, msg2);
                                        _a.label = 4;
                                    case 4: return [2 /*return*/];
                                }
                            });
                        }); });
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Updates data in the game's leaderboard
     * @private
     */
    TriviaGame.prototype.updateLeaderboard = function () {
        this.leaderboard = this.players.sort(function (a, b) {
            return b.points - a.points;
        });
    };
    TriviaGame.defaults = {
        questionData: {
            category: null,
            amount: 10,
            difficulty: null,
            type: null,
        },
        minimumPlayerCount: 1,
        maximumPlayerCount: 50,
        timePerQuestion: 20000,
        queueTime: 15000,
        minimumPoints: 1,
        maximumPoints: 100,
        timeBetweenRounds: 6000,
        pointsPerStreakAmount: 10,
        maximumStreakBonus: 30,
        streakDefinitionLevel: 3,
    };
    // The following error occures without :any
    // The inferred type of 'buttonRows' cannot be named without a reference to 'discord.js/node_modules/discord-api-types/v9'. This is likely not portable. A type annotation is necessary.
    TriviaGame.buttonRows = {
        multiple: messageActionRows_1.buttonRowChoicesMultiple,
        boolean: messageActionRows_1.buttonRowChoicesBoolean,
        queue: messageActionRows_1.buttonRowQueue,
    };
    return TriviaGame;
}(events_1.EventEmitter));
exports.default = TriviaGame;
