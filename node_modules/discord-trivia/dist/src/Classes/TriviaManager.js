"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var discord_js_1 = require("discord.js");
var DiscordTriviaError_1 = require("./DiscordTriviaError");
var RootComponent_1 = require("./RootComponent");
var TriviaGame_1 = require("./TriviaGame");
var constants_1 = require("../../constants");
/**
 * @class Class for creating and managing ongiong games.
 */
var TriviaManager = /** @class */ (function () {
    function TriviaManager(options) {
        this.games = new discord_js_1.Collection();
        this.validator = {
            validateDiscordStructures: function (game) {
                if (game.guild === null) {
                    var _a = DiscordTriviaError_1.default.errors.guildNullish, message = _a.message, header = _a.header;
                    throw new DiscordTriviaError_1.default(message, header);
                }
                else if (game.channel === null) {
                    var _b = DiscordTriviaError_1.default.errors.channelNullish, message = _b.message, header = _b.header;
                    throw new DiscordTriviaError_1.default(message, header);
                }
                else if (!game.channel.isText()) {
                    var _c = DiscordTriviaError_1.default.errors.channelNonText, message = _c.message, header = _c.header;
                    throw new DiscordTriviaError_1.default(message, header);
                }
            },
            validatePlayerCount: function (label, val) {
                if (!val && val != 0) {
                    throw new DiscordTriviaError_1.default("A ".concat(label, " option for TriviaGameOptions is required"), "MISSING_OPTION");
                }
                else if (typeof val != "number" && typeof val != "string") {
                    throw new DiscordTriviaError_1.default("The ".concat(label, " option for TriviaGameOptions must be of type number or string"), "INVALID_OPTION");
                }
                else if (isNaN(+val)) {
                    throw new DiscordTriviaError_1.default("The ".concat(label, " option for TriviaGameOptions must be a number resolvable"), "INVALID_OPTION");
                }
                else if (+val % 1 !== 0) {
                    throw new DiscordTriviaError_1.default("The ".concat(label, " option for TriviaGameOptions must be a whole integer"), "INVALID_OPTION");
                }
                else if (+val < 1) {
                    throw new DiscordTriviaError_1.default("The ".concat(label, " option for TriviaGameOptions must be greater than or equal to 1"), "INVALID_OPTION");
                }
            },
            checkPlayerCountRelation: function (min, max) {
                if (min > max)
                    throw new DiscordTriviaError_1.default("The maximumPlayerCount option for TriviaGameOptions cannot be less than the minimumPlayerCountOption", "INVALID_OPTION");
            },
            validatePointRange: function (label, val) {
                if (!val && val != 0) {
                    throw new DiscordTriviaError_1.default("A ".concat(label, " option for TriviaGameOptions is required"), "MISSING_OPTION");
                }
                else if (typeof val != "number" && typeof val != "string") {
                    throw new DiscordTriviaError_1.default("The ".concat(label, " option for TriviaGameOptions must be of type number or string"), "INVALID_OPTION");
                }
                else if (isNaN(+val)) {
                    throw new DiscordTriviaError_1.default("The ".concat(label, " option for TriviaGameOptions must be a number resolvable"), "INVALID_OPTION");
                }
                else if (+val % 1 !== 0) {
                    throw new DiscordTriviaError_1.default("The ".concat(label, " option for TriviaGameOptions must be a whole integer"), "INVALID_OPTION");
                }
                else if (+val < 1) {
                    throw new DiscordTriviaError_1.default("The ".concat(label, " option for TriviaGameOptions must be greater than or equal to 1"), "INVALID_OPTION");
                }
            },
            checkPointRangeRelation: function (min, max) {
                if (min > max)
                    throw new DiscordTriviaError_1.default("The maxPoints option for TriviaGameOptions cannot be less than the minPoints", "INVALID_OPTION");
            },
            validateTimePerQuestion: function (val) {
                if (!val && val != 0) {
                    throw new DiscordTriviaError_1.default("A timePerQuestion option for TriviaGameOptions is required", "MISSING_OPTION");
                }
                else if (typeof val != "number" && typeof val != "string") {
                    throw new DiscordTriviaError_1.default("The timePerQuestion option for TriviaGameOptions must be of type number or string", "INVALID_OPTION");
                }
                else if (isNaN(+val)) {
                    throw new DiscordTriviaError_1.default("The timePerQuestion option for TriviaGameOptions must be a number resolvable", "INVALID_OPTION");
                }
                else if (+val % 1 !== 0) {
                    throw new DiscordTriviaError_1.default("The timePerQuestion option for TriviaGameOptions must be a whole integer", "INVALID_OPTION");
                }
                else if (+val < 1000) {
                    throw new DiscordTriviaError_1.default("The timePerQuestion option for TriviaGameOptions must be greater than or equal to 1000ms", "INVALID_OPTION");
                }
            },
            validateQuestionAmount: function (val) {
                if (!val && val != 0) {
                    throw new DiscordTriviaError_1.default("A questionAmount option for TriviaGameOptions is required", "MISSING_OPTION");
                }
                else if (typeof val != "number" && typeof val != "string") {
                    throw new DiscordTriviaError_1.default("The questionAmount option for TriviaGameOptions must be of type number or string", "INVALID_OPTION");
                }
                else if (isNaN(+val)) {
                    throw new DiscordTriviaError_1.default("The questionAmount option for TriviaGameOptions must be a number resolvable", "INVALID_OPTION");
                }
                else if (+val % 1 !== 0) {
                    throw new DiscordTriviaError_1.default("The questionAmount option for TriviaGameOptions must be a whole integer", "INVALID_OPTION");
                }
                else if (+val < 1) {
                    throw new DiscordTriviaError_1.default("The questionAmount option for TriviaGameOptions must be greater than or equal to 1", "INVALID_OPTION");
                }
            },
            validateQuestionDifficulty: function (val) {
                if (val === null)
                    return;
                if (!val) {
                    throw new DiscordTriviaError_1.default("A questionDifficulty option for TriviaGameOptions is required", "MISSING_OPTION");
                }
                else if (typeof val != "string") {
                    throw new DiscordTriviaError_1.default("The questionDifficulty option for TriviaGameOptions must be a string", "INVALID_OPTION");
                }
                else if (!["easy", "medium", "hard"].includes(val.toLowerCase())) {
                    throw new DiscordTriviaError_1.default("Supplied questionDifficulty option (".concat(val, ") is not a questionDifficulty resolvable"), "INVALID_OPTION");
                }
            },
            validateQuestionType: function (val) {
                if (val === null)
                    return;
                if (!val) {
                    throw new DiscordTriviaError_1.default("A questionType option for TriviaGameOptions is required", "MISSING_OPTION");
                }
                else if (typeof val != "string") {
                    throw new DiscordTriviaError_1.default("The questionType option for TriviaGameOptions must be a string", "INVALID_OPTION");
                }
                else if (!["multiple", "boolean"].includes(val.toLowerCase())) {
                    throw new DiscordTriviaError_1.default("Supplied questionType option (".concat(val, ") is not a questionType resolvable"), "INVALID_OPTION");
                }
            },
            validateQueueTime: function (val) {
                if (!val && val != 0) {
                    throw new DiscordTriviaError_1.default("A queueTime option for TriviaGameOptions is required", "MISSING_OPTION");
                }
                else if (typeof val != "number" && typeof val != "string") {
                    throw new DiscordTriviaError_1.default("The queueTime option for TriviaGameOptions must be of type number or string", "INVALID_OPTION");
                }
                else if (isNaN(+val)) {
                    throw new DiscordTriviaError_1.default("The queueTime option for TriviaGameOptions must be a number resolvable", "INVALID_OPTION");
                }
                else if (+val % 1 !== 0) {
                    throw new DiscordTriviaError_1.default("The queueTime option for TriviaGameOptions must be a whole integer", "INVALID_OPTION");
                }
                else if (+val < 1000) {
                    throw new DiscordTriviaError_1.default("The queueTime option for TriviaGameOptions must be greater than or equal to 1000ms", "INVALID_OPTION");
                }
            },
            validatePointsPerStreakAmount: function (val) {
                if (!val) {
                    throw new DiscordTriviaError_1.default("A pointsPerStreakAmount option for TriviaGameOptions is required", "MISSING_OPTION");
                }
                else if (typeof val != "number" && typeof val != "string") {
                    throw new DiscordTriviaError_1.default("The pointsPerStreakAmount option for TriviaGameOptions must be of type number or string", "INVALID_OPTION");
                }
                else if (isNaN(+val)) {
                    throw new DiscordTriviaError_1.default("The pointsPerStreakAmount option for TriviaGameOptions must be a number resolvable", "INVALID_OPTION");
                }
                else if (+val % 1 !== 0) {
                    throw new DiscordTriviaError_1.default("The pointsPerStreakAmount option for TriviaGameOptions must be a whole integer", "INVALID_OPTION");
                }
                else if (+val < 0) {
                    throw new DiscordTriviaError_1.default("The pointsPerStreakAmount option for TriviaGameOptions must be greater than or equal to 0", "INVALID_OPTION");
                }
            },
            validateMaximumStreakBonus: function (val) {
                if (!val && val != 0) {
                    throw new DiscordTriviaError_1.default("A maximumStreakBonus option for TriviaGameOptions is required", "MISSING_OPTION");
                }
                else if (typeof val != "number" && typeof val != "string") {
                    throw new DiscordTriviaError_1.default("The maximumStreakBonus option for TriviaGameOptions must be of type number or string", "INVALID_OPTION");
                }
                else if (isNaN(+val)) {
                    throw new DiscordTriviaError_1.default("The maximumStreakBonus option for TriviaGameOptions must be a number resolvable", "INVALID_OPTION");
                }
                else if (+val % 1 !== 0) {
                    throw new DiscordTriviaError_1.default("The maximumStreakBonus option for TriviaGameOptions must be a whole integer", "INVALID_OPTION");
                }
                else if (+val < 0) {
                    throw new DiscordTriviaError_1.default("The maximumStreakBonus option for TriviaGameOptions must be greater than or equal to 0", "INVALID_OPTION");
                }
            },
            validateGameOptions: function (obj) {
                if (Array.isArray(obj.questionData))
                    return;
                try {
                    this.validatePlayerCount("minimumPlayerCount", obj.minimumPlayerCount);
                    this.validatePlayerCount("maximumPlayerCount", obj.maximumPlayerCount);
                    this.validatePointRange("maxPoints", obj.maximumPoints);
                    this.validatePointRange("minPoints", obj.minimumPoints);
                    this.checkPlayerCountRelation(obj.minimumPlayerCount, obj.maximumPlayerCount);
                    this.checkPointRangeRelation(obj.minimumPoints, obj.maximumPoints);
                    this.validateTimePerQuestion(obj.timePerQuestion);
                    this.validateQuestionDifficulty(obj.questionData.difficulty);
                    this.validateQuestionAmount(obj.questionData.amount);
                    this.validateQuestionType(obj.questionData.type);
                    this.validateQueueTime(obj.queueTime);
                    this.validatePointsPerStreakAmount(obj.pointsPerStreakAmount);
                    this.validateMaximumStreakBonus(obj.maximumStreakBonus);
                }
                catch (err) {
                    throw err;
                }
            },
        };
        this.options = options
            ? Object.assign(TriviaManager.defaults, options)
            : TriviaManager.defaults;
    }
    /**
     * Returns an instance of a TriviaGame
     * @param {CommandInteraction} interaction - The interaction to assign to the game.
     * @param {Partial<TriviaGameOptions>?} options - The configuration options to assign to the game (optional)
     */
    TriviaManager.prototype.createGame = function (root, options) {
        var component = new RootComponent_1.default(root);
        if (component.type == "interaction") {
            if (!component.entity.isCommand()) {
                throw new DiscordTriviaError_1.default("Supplied interaction must be a CommandInteraction", "INVALID_INTERACTION");
            }
            else if (this.games.has(component.channel.id)) {
                var errorMessage = "There's already an ongoing game in this channel";
                component.reply["interaction"]({
                    content: errorMessage,
                    ephemeral: true,
                });
                throw new DiscordTriviaError_1.default(errorMessage, "ONGOING_GAME");
            }
        }
        return new TriviaGame_1.default(component, this, options);
    };
    TriviaManager.defaults = {
        theme: "BLURPLE",
        showAnswers: true,
        image: constants_1.default.libraryDefaults.defaultEmbedImage,
    };
    return TriviaManager;
}());
exports.default = TriviaManager;
