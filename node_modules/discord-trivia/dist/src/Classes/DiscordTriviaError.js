"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var DiscordTriviaError = /** @class */ (function (_super) {
    __extends(DiscordTriviaError, _super);
    function DiscordTriviaError(message, header) {
        var _this = this;
        if (typeof message != "string")
            throw new DiscordTriviaError("Expected a string for 'message', recieved ".concat(typeof message), "INVALID_CONSTRUCTOR_ARGUMENT");
        if (typeof header != "string")
            throw new DiscordTriviaError("Expected a string for 'header', recieved ".concat(typeof header), "INVALID_CONSTRUCTOR_ARGUMENT");
        _this = _super.call(this, message) || this;
        _this.name = "DiscordTriviaError [".concat(header, "]");
        return _this;
    }
    DiscordTriviaError.errors = {
        channelNonText: {
            message: "Given channel is not of type TEXT",
            header: "INTERACTION_CHANNEL_NON_TEXT",
        },
        channelNullish: {
            message: "Channel guild is not accessible to the client",
            header: "INTERACTION_CHANNEL_NULLISH",
        },
        interactionNonCommand: {
            message: "Supplied interaction is not of type CommandInteraction",
            header: "INTERACTION_NON_COMMAND",
        },
        guildNullish: {
            message: "Guild is not accessible to the client",
            header: "INTERACTION_GUILD_NULLISH",
        },
    };
    return DiscordTriviaError;
}(Error));
exports.default = DiscordTriviaError;
