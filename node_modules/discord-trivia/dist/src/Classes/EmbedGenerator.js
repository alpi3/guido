"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var discord_js_1 = require("discord.js");
var open_trivia_db_1 = require("open-trivia-db");
var constants_1 = require("../../constants");
var EmbedGenerator = /** @class */ (function () {
    function EmbedGenerator(game) {
        this.game = game;
        this.theme = game.manager.options.theme || "BLURPLE";
    }
    EmbedGenerator.prototype.gameQueueStart = function () {
        var _a;
        return new discord_js_1.MessageEmbed()
            .setTitle("".concat(this.game.hostMember.displayName, " is starting a Trivia Game!"))
            .setColor(this.theme)
            .setAuthor(constants_1.default.embeds.author)
            .setThumbnail("https://cdn.discordapp.com/attachments/947636249856999424/947636392673038336/icon.png")
            .addFields({
            name: "Category",
            value: ((_a = open_trivia_db_1.Category.resolve(this.game.options.questionData
                .category)) === null || _a === void 0 ? void 0 : _a.prettyName) || "Randomized",
            inline: true,
        }, {
            name: "Difficulty",
            value: this.game.options.questionData.difficulty ||
                "Mixed",
            inline: true,
        }, {
            name: "Max Players",
            value: this.game.options.maximumPlayerCount.toString() || "NULL",
            inline: true,
        })
            .setImage(this.game.manager.options.image)
            .setFooter(constants_1.default.embeds.interactWithButtons);
    };
    EmbedGenerator.prototype.gameStart = function () {
        var playersList;
        var remainingPlayers = null;
        if (this.game.players.size > 10) {
            playersList = Array.from(this.game.players.first(10))
                .map(function (member) { return "**".concat(member.displayName, "**"); })
                .join("\n");
            remainingPlayers = this.game.players.size - 10;
        }
        else {
            playersList = Array.from(this.game.players.values())
                .map(function (member) { return "\u2022 ".concat(member.displayName); })
                .join("\n");
        }
        return new discord_js_1.MessageEmbed()
            .setTitle("Trivia Game is now starting!")
            .setThumbnail("https://cdn.discordapp.com/attachments/947636249856999424/947636392673038336/icon.png")
            .setColor(this.theme)
            .setDescription("**Players:**\n".concat(playersList).concat(remainingPlayers
            ? "\n...\nAnd ".concat(remainingPlayers.toString(), " more!")
            : ""))
            .setAuthor(constants_1.default.embeds.author)
            .setFooter(constants_1.default.embeds.interactWithButtons);
    };
    EmbedGenerator.prototype.leaderboardUpdate = function (question) {
        var _this = this;
        var embed = new discord_js_1.MessageEmbed()
            .setAuthor(constants_1.default.embeds.author)
            .setTitle("Leaderboard")
            .setThumbnail("https://cdn.discordapp.com/attachments/947636249856999424/947636392673038336/icon.png")
            .setColor(this.theme)
            .addFields(Array.from(this.game.leaderboard).map(function (entry, i) {
            var player = entry[1];
            var streakBonus = Math.min(Math.max((player.correctAnswerStreak -
                (_this.game.options.streakDefinitionLevel - 1)) *
                _this.game.options.pointsPerStreakAmount, 0), _this.game.options.maximumStreakBonus);
            return {
                name: "#".concat(i + 1),
                value: "".concat(player.isCorrect ? "✅" : "❌", " ").concat(player.toString(), "  ").concat(player.points, " ").concat(player.correctAnswerStreak >=
                    _this.game.options.streakDefinitionLevel
                    ? " (\uD83D\uDD25 +".concat(streakBonus, ")")
                    : ""),
            };
        }));
        var description = "";
        if (this.game.manager.options.showAnswers) {
            description += "Correct Answer:\n**".concat(question.correctAnswer, "**\n");
        }
        var playersWithStreaks = this.game.players.filter(function (p) { return p.correctAnswerStreak >= 3; });
        if (playersWithStreaks.size) {
            var list = playersWithStreaks.map(function (p) { return p.toString(); }).join(", ");
            description += "\n\uD83D\uDD25 ".concat(list, " are on a streak!");
        }
        if (this.game.players.every(function (p) { return p.isCorrect; })) {
            embed.setFooter({
                text: "Everyone got it right!",
            });
        }
        else if (this.game.players.every(function (p) { return !p.isCorrect; })) {
            embed.setFooter({
                text: "Nobody got it right.",
            });
        }
        embed.setDescription(description);
        return embed;
    };
    EmbedGenerator.prototype.finalLeaderboard = function () {
        var emojis = constants_1.default.embeds.emojis;
        var medals = [emojis("GOLD"), emojis("SILVER"), emojis("BRONZE")];
        var podium = this.game.leaderboard
            .first(3)
            .map(function (m, i) { return "".concat(medals[i], " ").concat(m.toString(), " ").concat(m.points); })
            .join("\n");
        return new discord_js_1.MessageEmbed()
            .setAuthor(constants_1.default.embeds.author)
            .setTitle("Game Has Ended")
            .setThumbnail("https://cdn.discordapp.com/attachments/947636249856999424/947636392673038336/icon.png")
            .setColor(this.theme)
            .setDescription(podium)
            .setFooter({
            text: "Thanks for playing",
        });
    };
    EmbedGenerator.prototype.question = function (question) {
        var embed = new discord_js_1.MessageEmbed()
            .setAuthor(constants_1.default.embeds.author)
            .setTitle("New Question")
            .setThumbnail("https://cdn.discordapp.com/attachments/947636249856999424/947636392673038336/icon.png")
            .addFields({
            name: "Category",
            value: question.category,
            inline: true,
        }, {
            name: "Difficulty",
            value: question.difficulty,
            inline: true,
        }, {
            name: "Question",
            value: question.value,
        })
            .setColor(this.theme)
            .setFooter(constants_1.default.embeds.interactWithButtons);
        if (question.type == "multiple") {
            var choices = question.allAnswers
                .map(function (ans, i) {
                var symbol = constants_1.default.embeds.emojis(["A", "B", "C", "D"][i]);
                return "".concat(symbol, " ").concat(ans);
            })
                .join("\n");
            embed.addField("Choices", choices);
        }
        return embed;
    };
    return EmbedGenerator;
}());
exports.default = EmbedGenerator;
