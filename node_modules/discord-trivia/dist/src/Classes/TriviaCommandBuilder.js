"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var builders_1 = require("@discordjs/builders");
var TriviaGame_1 = require("./TriviaGame");
var TriviaCommandBuilder = /** @class */ (function () {
    function TriviaCommandBuilder(options) {
        var _this = this;
        var _a, _b;
        this.gameOptions = TriviaGame_1.default.defaults;
        this.isApplied = false;
        this.optionApplicators = {
            maximumPlayerCount: function () {
                _this.build.addIntegerOption(function (opt) {
                    return opt
                        .setName("maximum_player_count")
                        .setDescription("The maximum amount of players allowed to join this match")
                        .setRequired(false);
                });
            },
            maximumPoints: function () {
                _this.build.addIntegerOption(function (opt) {
                    return opt
                        .setName("maximum_points")
                        .setDescription("The maximum amount of points a player can earn per question")
                        .setRequired(false);
                });
            },
            minimumPlayerCount: function () {
                _this.build.addIntegerOption(function (opt) {
                    return opt
                        .setName("minimum_player_count")
                        .setDescription("The minimum amount of players required to start the match")
                        .setRequired(false);
                });
            },
            minimumPoints: function () {
                _this.build.addIntegerOption(function (opt) {
                    return opt
                        .setName("minimum_points")
                        .setDescription("The minimum amount of points a player can earn per question")
                        .setRequired(false);
                });
            },
            questionAmount: function () {
                _this.build.addIntegerOption(function (opt) {
                    return opt
                        .setName("question_amount")
                        .setDescription("The number of questions")
                        .setRequired(false);
                });
            },
            questionDifficulty: function () {
                _this.build.addStringOption(function (opt) {
                    return opt
                        .setName("question_difficulty")
                        .setDescription("The difficulty all questions should be")
                        .addChoices([
                        ["Easy", "easy"],
                        ["Medium", "medium"],
                        ["Hard", "hard"],
                    ])
                        .setRequired(false);
                });
            },
            questionType: function () {
                _this.build.addStringOption(function (opt) {
                    return opt
                        .setName("question_type")
                        .setDescription("The question type for all questions")
                        .addChoices([
                        ["Multiple Choice", "multiple"],
                        ["True/False", "boolean"],
                    ])
                        .setRequired(false);
                });
            },
            queueTime: function () {
                _this.build.addIntegerOption(function (opt) {
                    return opt
                        .setName("queue_time")
                        .setDescription("How long to await players before starting the match")
                        .setRequired(false);
                });
            },
            timePerQuestion: function () {
                _this.build.addIntegerOption(function (opt) {
                    return opt
                        .setName("time_per_question")
                        .setDescription("How long each round should last (in milliseconds)")
                        .setRequired(false);
                });
            },
            triviaCategory: function () {
                _this.build.addStringOption(function (opt) {
                    return opt
                        .setName("category")
                        .setDescription("The category for the questions")
                        .addChoices([
                        ["General Knowledge", "9"],
                        ["Entertainment: Books", "10"],
                        ["Entertainment: Film", "11"],
                        ["Entertainment: Music", "12"],
                        ["Entertainment: Musicals and Theatres", "13"],
                        ["Entertainment: Television", "14"],
                        ["Entertainment: Video Games", "15"],
                        ["Entertainment: Board Games", "16"],
                        ["Science and Nature", "17"],
                        ["Science: Computers", "18"],
                        ["Science Mathematics", "19"],
                        ["Mythology", "20"],
                        ["Sports", "21"],
                        ["Geography", "22"],
                        ["History", "23"],
                        ["Politics", "24"],
                        ["Art", "25"],
                        ["Celebrities", "26"],
                        ["Animals", "27"],
                        ["Vehicles", "28"],
                        ["Entertainment: Comics", "29"],
                        ["Science: Gadgets", "30"],
                        ["Entertainment: Japanese Anime and Manga", "31"],
                        ["Entertainment: Cartoon and Animations", "32"],
                    ])
                        .setRequired(false);
                });
            },
            timeBetweenRounds: function () {
                _this.build.addIntegerOption(function (opt) {
                    return opt
                        .setName("time_between_rounds")
                        .setDescription("How long to wait between rounds in ms")
                        .setRequired(false);
                });
            },
            pointsPerStreakAmount: function () {
                _this.build.addIntegerOption(function (opt) {
                    return opt
                        .setName("points_per_streak")
                        .setDescription("How many bonus points to award per streak accumulation")
                        .setRequired(false);
                });
            },
            maximumStreakBonus: function () {
                _this.build.addIntegerOption(function (opt) {
                    return opt
                        .setName("max_streak_bonus")
                        .setDescription("Maximum bonus for accumulated streaks")
                        .setRequired(false);
                });
            },
            streakDefinitionLevel: function () {
                _this.build.addIntegerOption(function (opt) {
                    return opt
                        .setName("streak_level")
                        .setDescription("At which consecutive correct answer to start streak")
                        .setRequired(false);
                });
            },
        };
        this.build = new builders_1.SlashCommandBuilder()
            .setName((_a = options === null || options === void 0 ? void 0 : options.name) !== null && _a !== void 0 ? _a : "trivia")
            .setDescription((_b = options === null || options === void 0 ? void 0 : options.description) !== null && _b !== void 0 ? _b : "Create a trivia game.");
    }
    TriviaCommandBuilder.prototype.applyOptions = function () {
        Object.values(this.optionApplicators).forEach(function (func) { return func(); });
    };
    TriviaCommandBuilder.prototype.toJSON = function () {
        if (!this.isApplied) {
            this.applyOptions();
            this.isApplied = true;
        }
        return this.build.toJSON();
    };
    TriviaCommandBuilder.prototype.toBuilder = function () {
        if (!this.isApplied) {
            this.applyOptions();
            this.isApplied = true;
        }
        return this.build;
    };
    TriviaCommandBuilder.prototype.getOptions = function (int, additionalOptions) {
        var maximumPlayerCount = int.options.getInteger("maximum_player_count");
        var maximumPoints = int.options.getInteger("maximum_points");
        var minimumPlayerCount = int.options.getInteger("minimum_player_count");
        var minimumPoints = int.options.getInteger("minimum_points");
        var questionAmount = int.options.getInteger("question_amount");
        var questionDifficulty = int.options.getString("question_difficulty");
        var questionType = int.options.getString("question_type");
        var queueTime = int.options.getInteger("queue_time");
        var timePerQuestion = int.options.getInteger("time_per_question");
        var triviaCategory = int.options.getString("category");
        var timeBetweenRounds = int.options.getInteger("time_between_rounds");
        var pointsPerStreakAmount = int.options.getInteger("points_per_streak");
        var maximumStreakBonus = int.options.getInteger("max_streak_bonus");
        var streakDefinitionLevel = int.options.getInteger("streak_level");
        var options = {};
        options.maximumPlayerCount =
            maximumPlayerCount || TriviaGame_1.default.defaults.maximumPlayerCount;
        options.maximumPoints = maximumPoints || TriviaGame_1.default.defaults.maximumPoints;
        options.minimumPlayerCount =
            minimumPlayerCount || TriviaGame_1.default.defaults.minimumPlayerCount;
        options.minimumPlayerCount =
            minimumPlayerCount || TriviaGame_1.default.defaults.minimumPlayerCount;
        options.minimumPoints = minimumPoints || TriviaGame_1.default.defaults.minimumPoints;
        if (!Array.isArray(options.questionData)) {
            options.questionData = {};
            options.questionData.amount =
                questionAmount ||
                    TriviaGame_1.default.defaults.questionData.amount;
            options.questionData.difficulty = (questionDifficulty ||
                TriviaGame_1.default.defaults.questionData
                    .difficulty);
            options.questionData.type = (questionType ||
                TriviaGame_1.default.defaults.questionData
                    .type);
            options.queueTime = queueTime || TriviaGame_1.default.defaults.queueTime;
            options.timePerQuestion =
                timePerQuestion || TriviaGame_1.default.defaults.timePerQuestion;
            options.questionData.category =
                triviaCategory ||
                    TriviaGame_1.default.defaults.questionData.category;
        }
        options.timeBetweenRounds =
            timeBetweenRounds || TriviaGame_1.default.defaults.timeBetweenRounds;
        options.pointsPerStreakAmount =
            pointsPerStreakAmount || TriviaGame_1.default.defaults.pointsPerStreakAmount;
        options.maximumStreakBonus =
            maximumStreakBonus || TriviaGame_1.default.defaults.maximumStreakBonus;
        options.streakDefinitionLevel =
            streakDefinitionLevel || TriviaGame_1.default.defaults.streakDefinitionLevel;
        if (additionalOptions)
            Object.assign(options, additionalOptions);
        return options;
    };
    return TriviaCommandBuilder;
}());
exports.default = TriviaCommandBuilder;
