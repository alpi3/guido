/// <reference types="node" />
import { Collection, Guild, GuildMember, Message, TextBasedChannel } from "discord.js";
import TriviaManager from "./TriviaManager";
import { TriviaGameOptions, TriviaGameResultData, TriviaPlayer } from "../Typings/interfaces";
import { TriviaGameState, TriviaPlayers } from "../Typings/types";
import { EventEmitter } from "events";
import RootComponent from "./RootComponent";
declare interface TriviaGame {
    on(event: "pending", listener: () => void): this;
    on(event: "queue", listener: () => void): this;
    on(event: "inProgress", listener: () => void): this;
    on(event: "ended", listener: (data: TriviaGameResultData) => void): this;
    on(event: "playerJoinQueue", listener: (player: TriviaPlayer) => void): this;
}
/**
 * @class Class for trivia games. Holds dynamic data relating to the ongoing game.
 */
declare class TriviaGame extends EventEmitter implements TriviaGame {
    /**
     * The manager of this trivia game.
     * @readonly
     */
    readonly manager: TriviaManager;
    /**
     * The interaction this game was initiated with.
     * @readonly
     */
    readonly component: RootComponent;
    /**
     * The text channel this game was initiated in.
     * @readonly
     */
    readonly channel: TextBasedChannel;
    /**
     * The guild this game was initiated in.
     * @readonly
     */
    readonly guild: Guild;
    /**
     * The member who initiated this game.
     * @readonly
     */
    readonly hostMember: GuildMember;
    /**
     * The embed generator for this game.
     * @readonly
     * @private
     */
    private readonly embeds;
    /**
     * The players participating in this game
     * @readonly
     */
    readonly players: TriviaPlayers;
    /**
     * This game's configuration options.
     * @readonly
     */
    readonly options: TriviaGameOptions;
    /**
     * The state of this game.
     * @readonly
     * @type {TriviaGameState}
     */
    state: TriviaGameState;
    /**
     * This game's array of questions to be used.
     * @readonly
     */
    private questions;
    /**
     * This game's leaderboard.
     * @readonly
     */
    leaderboard: TriviaPlayers;
    /**
     * This game's messages.
     * @readonly
     */
    messages: Collection<string, Message>;
    static readonly defaults: TriviaGameOptions;
    constructor(component: RootComponent, manager: TriviaManager, options?: Partial<TriviaGameOptions>);
    static buttonRows: any;
    /**
     * Starts the trivia match.
     */
    start(): Promise<void>;
    /**
     * The data of this game.
     * @type {TriviaGameResultData}
     */
    data(): TriviaGameResultData;
    /**
     * Ends this game
     */
    end(): void;
    /**
     * Starts iterating through TriviaGame#questions and emits each.
     * @private
     */
    private beginGameLoop;
    /**
     * Prepares the game's data and channel for the next round.
     */
    private prepareNextRound;
    /**
     * Calculates the amount of points to award the player.
     * @param {number} timePassed - The amount of time elapsed since the question's emission in ms.
     * @private
     */
    private calculatePoints;
    /**
     * Sends a question in the game's text channel and listens for answers.
     * @param {Question} question - The question to send.
     * @private
     */
    private emitQuestion;
    /**
     * Starts the chain of private functions to start the game.
     * @private
     */
    private initializeGame;
    /**
     * Sets up a listener to collect answers.
     * @private
     */
    private startComponentCollector;
    /**
     * Updates data in the game's leaderboard
     * @private
     */
    private updateLeaderboard;
}
export default TriviaGame;
